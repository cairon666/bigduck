// Code generated by mockery v2.20.0. DO NOT EDIT.

package authusecase

import (
	models "backend/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCodeService is an autogenerated mock type for the CodeService type
type MockCodeService struct {
	mock.Mock
}

type MockCodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodeService) EXPECT() *MockCodeService_Expecter {
	return &MockCodeService_Expecter{mock: &_m.Mock}
}

// GetCodeByEmail provides a mock function with given fields: ctx, email
func (_m *MockCodeService) GetCodeByEmail(ctx context.Context, email string) (models.RecoverPassword, error) {
	ret := _m.Called(ctx, email)

	var r0 models.RecoverPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.RecoverPassword, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.RecoverPassword); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.RecoverPassword)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodeService_GetCodeByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeByEmail'
type MockCodeService_GetCodeByEmail_Call struct {
	*mock.Call
}

// GetCodeByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockCodeService_Expecter) GetCodeByEmail(ctx interface{}, email interface{}) *MockCodeService_GetCodeByEmail_Call {
	return &MockCodeService_GetCodeByEmail_Call{Call: _e.mock.On("GetCodeByEmail", ctx, email)}
}

func (_c *MockCodeService_GetCodeByEmail_Call) Run(run func(ctx context.Context, email string)) *MockCodeService_GetCodeByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCodeService_GetCodeByEmail_Call) Return(_a0 models.RecoverPassword, _a1 error) *MockCodeService_GetCodeByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodeService_GetCodeByEmail_Call) RunAndReturn(run func(context.Context, string) (models.RecoverPassword, error)) *MockCodeService_GetCodeByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SetCode provides a mock function with given fields: ctx, data
func (_m *MockCodeService) SetCode(ctx context.Context, data models.RecoverPassword) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RecoverPassword) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCodeService_SetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCode'
type MockCodeService_SetCode_Call struct {
	*mock.Call
}

// SetCode is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.RecoverPassword
func (_e *MockCodeService_Expecter) SetCode(ctx interface{}, data interface{}) *MockCodeService_SetCode_Call {
	return &MockCodeService_SetCode_Call{Call: _e.mock.On("SetCode", ctx, data)}
}

func (_c *MockCodeService_SetCode_Call) Run(run func(ctx context.Context, data models.RecoverPassword)) *MockCodeService_SetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.RecoverPassword))
	})
	return _c
}

func (_c *MockCodeService_SetCode_Call) Return(_a0 error) *MockCodeService_SetCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodeService_SetCode_Call) RunAndReturn(run func(context.Context, models.RecoverPassword) error) *MockCodeService_SetCode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCodeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCodeService creates a new instance of MockCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCodeService(t mockConstructorTestingTNewMockCodeService) *MockCodeService {
	mock := &MockCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
