// Code generated by mockery v2.20.0. DO NOT EDIT.

package authcontroller

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockHTTPHelper is an autogenerated mock type for the HTTPHelper type
type MockHTTPHelper struct {
	mock.Mock
}

type MockHTTPHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPHelper) EXPECT() *MockHTTPHelper_Expecter {
	return &MockHTTPHelper_Expecter{mock: &_m.Mock}
}

// HandleError provides a mock function with given fields: w, err
func (_m *MockHTTPHelper) HandleError(w http.ResponseWriter, err error) {
	_m.Called(w, err)
}

// MockHTTPHelper_HandleError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleError'
type MockHTTPHelper_HandleError_Call struct {
	*mock.Call
}

// HandleError is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - err error
func (_e *MockHTTPHelper_Expecter) HandleError(w interface{}, err interface{}) *MockHTTPHelper_HandleError_Call {
	return &MockHTTPHelper_HandleError_Call{Call: _e.mock.On("HandleError", w, err)}
}

func (_c *MockHTTPHelper_HandleError_Call) Run(run func(w http.ResponseWriter, err error)) *MockHTTPHelper_HandleError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(error))
	})
	return _c
}

func (_c *MockHTTPHelper_HandleError_Call) Return() *MockHTTPHelper_HandleError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPHelper_HandleError_Call) RunAndReturn(run func(http.ResponseWriter, error)) *MockHTTPHelper_HandleError_Call {
	_c.Call.Return(run)
	return _c
}

// SendJSON provides a mock function with given fields: w, data, status
func (_m *MockHTTPHelper) SendJSON(w http.ResponseWriter, data interface{}, status int) {
	_m.Called(w, data, status)
}

// MockHTTPHelper_SendJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendJSON'
type MockHTTPHelper_SendJSON_Call struct {
	*mock.Call
}

// SendJSON is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - data interface{}
//   - status int
func (_e *MockHTTPHelper_Expecter) SendJSON(w interface{}, data interface{}, status interface{}) *MockHTTPHelper_SendJSON_Call {
	return &MockHTTPHelper_SendJSON_Call{Call: _e.mock.On("SendJSON", w, data, status)}
}

func (_c *MockHTTPHelper_SendJSON_Call) Run(run func(w http.ResponseWriter, data interface{}, status int)) *MockHTTPHelper_SendJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(interface{}), args[2].(int))
	})
	return _c
}

func (_c *MockHTTPHelper_SendJSON_Call) Return() *MockHTTPHelper_SendJSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPHelper_SendJSON_Call) RunAndReturn(run func(http.ResponseWriter, interface{}, int)) *MockHTTPHelper_SendJSON_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockHTTPHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHTTPHelper creates a new instance of MockHTTPHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHTTPHelper(t mockConstructorTestingTNewMockHTTPHelper) *MockHTTPHelper {
	mock := &MockHTTPHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
