version: "3"

services:
#  proxy:
#    image: nginx:stable
#    restart: always
#    ports:
#      - 3000:80
#    networks:
#      - network
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
  #  database_redis:
  #    image: redis:7-alpine
  #    restart: always
  #    ports:
  #      - '6379:6379'
  #    volumes:
  #      - redis_data:/data
  #      - ../database/redis/redis.conf:/etc/redis/redis.conf
  #    command: [ "redis-server", "/etc/redis/redis.conf"  ]
  #  grafana:
  #    container_name: grafana
  #    image: grafana/grafana-enterprise
  #    ports:
  #      - 3000:3000
  #    environment:
  #      GF_SECURITY_ADMIN_USER: admin
  #      GF_SECURITY_ADMIN_PASSWORD: admin
  #      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: root
      PGDATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #      - ../database/postgres/dump.sql:/docker-entrypoint-initdb.d/dummy_dump.sql
      - ../database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../database/postgres/z_for_testing.sql:/docker-entrypoint-initdb.d/z_for_testing.sql
  #  database_pgadmin:
  #    image: dpage/pgadmin4
  #    environment:
  #      PGADMIN_DEFAULT_EMAIL: 'admin@admin.admin'
  #      PGADMIN_DEFAULT_PASSWORD: 'admin'
  #      PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED: 'False'
  #      GUNICORN_ACCESS_LOGFILE: '/dev/null'
  #    volumes:
  #      - pgadmin_data:/var/lib/pgadmin
  #    ports:
  #      - "5050:80"
  #    logging:
  #      driver: none
  #    restart: unless-stopped
#  backend:
#    container_name: backend
#    build:
#      context: ../backend
#      dockerfile: Dockerfile
#    restart: unless-stopped
#    networks:
#      - network
#    depends_on:
#      #      - database_redis
#      - postgres
#    environment:
#      - APP_PORT=8080
#      - POSTGRESQL_URL=postgresql://admin:admin@postgres:5432/root
#    volumes:
#      - ../backend:/app
#  swagger-ui:
#    image: swaggerapi/swagger-ui
#    ports:
#      - "3001:8080"
#    volumes:
#      - ../backend/docs:/usr/share/nginx/html/doc
#    environment:
#      API_URL: doc/swagger.yaml
#  frontend:
#    build:
#      context: ../frontend
#      dockerfile: Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ../frontend:/app
#      - frontend_node_modules:/app/node_modules
#    networks:
#      network:


volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:

networks:
  network:
