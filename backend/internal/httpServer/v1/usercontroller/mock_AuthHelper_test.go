// Code generated by mockery v2.20.0. DO NOT EDIT.

package usercontroller

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthHelper is an autogenerated mock type for the AuthHelper type
type MockAuthHelper struct {
	mock.Mock
}

type MockAuthHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthHelper) EXPECT() *MockAuthHelper_Expecter {
	return &MockAuthHelper_Expecter{mock: &_m.Mock}
}

// IsEqualIDUser provides a mock function with given fields: r, IDUser
func (_m *MockAuthHelper) IsEqualIDUser(r *http.Request, IDUser string) bool {
	ret := _m.Called(r, IDUser)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request, string) bool); ok {
		r0 = rf(r, IDUser)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuthHelper_IsEqualIDUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEqualIDUser'
type MockAuthHelper_IsEqualIDUser_Call struct {
	*mock.Call
}

// IsEqualIDUser is a helper method to define mock.On call
//   - r *http.Request
//   - IDUser string
func (_e *MockAuthHelper_Expecter) IsEqualIDUser(r interface{}, IDUser interface{}) *MockAuthHelper_IsEqualIDUser_Call {
	return &MockAuthHelper_IsEqualIDUser_Call{Call: _e.mock.On("IsEqualIDUser", r, IDUser)}
}

func (_c *MockAuthHelper_IsEqualIDUser_Call) Run(run func(r *http.Request, IDUser string)) *MockAuthHelper_IsEqualIDUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockAuthHelper_IsEqualIDUser_Call) Return(_a0 bool) *MockAuthHelper_IsEqualIDUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHelper_IsEqualIDUser_Call) RunAndReturn(run func(*http.Request, string) bool) *MockAuthHelper_IsEqualIDUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthHelper creates a new instance of MockAuthHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthHelper(t mockConstructorTestingTNewMockAuthHelper) *MockAuthHelper {
	mock := &MockAuthHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
