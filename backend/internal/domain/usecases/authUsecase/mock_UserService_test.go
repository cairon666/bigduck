// Code generated by mockery v2.20.0. DO NOT EDIT.

package authUsecase

import (
	models "backend/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserService) Create(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *MockUserService_Expecter) Create(ctx interface{}, user interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserService_Create_Call) Run(run func(ctx context.Context, user models.User)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(_a0 error) *MockUserService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(context.Context, models.User) error) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserService) ReadByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_ReadByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByEmail'
type MockUserService_ReadByEmail_Call struct {
	*mock.Call
}

// ReadByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) ReadByEmail(ctx interface{}, email interface{}) *MockUserService_ReadByEmail_Call {
	return &MockUserService_ReadByEmail_Call{Call: _e.mock.On("ReadByEmail", ctx, email)}
}

func (_c *MockUserService_ReadByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_ReadByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_ReadByEmail_Call) Return(_a0 *models.User, _a1 error) *MockUserService_ReadByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_ReadByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserService_ReadByEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserService(t mockConstructorTestingTNewMockUserService) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
