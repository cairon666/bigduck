// Code generated by mockery v2.20.0. DO NOT EDIT.

package userUsecase

import (
	models "backend/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockUserService) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockUserService_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) DeleteById(ctx interface{}, id interface{}) *MockUserService_DeleteById_Call {
	return &MockUserService_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockUserService_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockUserService_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_DeleteById_Call) Return(_a0 error) *MockUserService_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// ReadById provides a mock function with given fields: ctx, id
func (_m *MockUserService) ReadById(ctx context.Context, id string) (*models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_ReadById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadById'
type MockUserService_ReadById_Call struct {
	*mock.Call
}

// ReadById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) ReadById(ctx interface{}, id interface{}) *MockUserService_ReadById_Call {
	return &MockUserService_ReadById_Call{Call: _e.mock.On("ReadById", ctx, id)}
}

func (_c *MockUserService_ReadById_Call) Run(run func(ctx context.Context, id string)) *MockUserService_ReadById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_ReadById_Call) Return(_a0 *models.User, _a1 error) *MockUserService_ReadById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_ReadById_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserService_ReadById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function with given fields: ctx, id, data
func (_m *MockUserService) UpdateById(ctx context.Context, id string, data map[string]interface{}) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type MockUserService_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - data map[string]interface{}
func (_e *MockUserService_Expecter) UpdateById(ctx interface{}, id interface{}, data interface{}) *MockUserService_UpdateById_Call {
	return &MockUserService_UpdateById_Call{Call: _e.mock.On("UpdateById", ctx, id, data)}
}

func (_c *MockUserService_UpdateById_Call) Run(run func(ctx context.Context, id string, data map[string]interface{})) *MockUserService_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockUserService_UpdateById_Call) Return(_a0 error) *MockUserService_UpdateById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateById_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *MockUserService_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserService(t mockConstructorTestingTNewMockUserService) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
