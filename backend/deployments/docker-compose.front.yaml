version: "3"

services:
  backend:
    container_name: backend
    build:
      context: ../
      dockerfile: Dockerfile
    environment:
      # redis
      - "REDIS_URL=redis://admin:admin@redis:6379/0"
      # postgres
      - "POSTGRESQL_URL=postgresql://admin:admin@postgres:5432/root"
      - "TRACE_GRPC_ADDR=otel_collector:4317"
      - "METRIC_GRPC_ADDR=otel_collector:12345"
      - "AWS_ACCESS_KEY_ID=minioadmin"
      - "AWS_SECRET_ACCESS_KEY=minioadmin"
      - "AWS_ENDPOINT=http://minio:9000"
    depends_on:
      - redis
      - postgres
      - otel_collector
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - backend
  minio:
    container_name: minio
    image: 'minio/minio'
    command: server /data --address ":9000" --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-storage:/data
    restart: unless-stopped
    networks:
      - backend
  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    environment:
      XPACK_MONITORING_ENABLED: "false"
    volumes:
      - redis_data:/data
      - ../configs/redis/redis.conf:/etc/redis/redis.conf
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    networks:
      - backend
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - ../configs/postgres/postgresql.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  otel_collector:
    container_name: otel_collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ../configs/otelcol/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "12345:12345" # otlp/spanmetrics grpc receiver
    networks:
      - backend


volumes:
  postgres_data: { }
  redis_data: { }
  minio-storage: { }

networks:
  backend:


