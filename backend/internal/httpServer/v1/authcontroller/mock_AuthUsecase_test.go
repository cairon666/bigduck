// Code generated by mockery v2.20.0. DO NOT EDIT.

package authcontroller

import (
	authusecase "backend/internal/domain/usecases/authusecase"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, dto
func (_m *MockAuthUsecase) Login(ctx context.Context, dto authusecase.LoginRequest) (authusecase.LoginResponse, error) {
	ret := _m.Called(ctx, dto)

	var r0 authusecase.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.LoginRequest) (authusecase.LoginResponse, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.LoginRequest) authusecase.LoginResponse); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(authusecase.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authusecase.LoginRequest) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - dto authusecase.LoginRequest
func (_e *MockAuthUsecase_Expecter) Login(ctx interface{}, dto interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, dto)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(ctx context.Context, dto authusecase.LoginRequest)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authusecase.LoginRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(_a0 authusecase.LoginResponse, _a1 error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(context.Context, authusecase.LoginRequest) (authusecase.LoginResponse, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverPasswordConfirm provides a mock function with given fields: ctx, req
func (_m *MockAuthUsecase) RecoverPasswordConfirm(ctx context.Context, req authusecase.RecoverPasswordConfirmRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.RecoverPasswordConfirmRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_RecoverPasswordConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverPasswordConfirm'
type MockAuthUsecase_RecoverPasswordConfirm_Call struct {
	*mock.Call
}

// RecoverPasswordConfirm is a helper method to define mock.On call
//   - ctx context.Context
//   - req authusecase.RecoverPasswordConfirmRequest
func (_e *MockAuthUsecase_Expecter) RecoverPasswordConfirm(ctx interface{}, req interface{}) *MockAuthUsecase_RecoverPasswordConfirm_Call {
	return &MockAuthUsecase_RecoverPasswordConfirm_Call{Call: _e.mock.On("RecoverPasswordConfirm", ctx, req)}
}

func (_c *MockAuthUsecase_RecoverPasswordConfirm_Call) Run(run func(ctx context.Context, req authusecase.RecoverPasswordConfirmRequest)) *MockAuthUsecase_RecoverPasswordConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authusecase.RecoverPasswordConfirmRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordConfirm_Call) Return(_a0 error) *MockAuthUsecase_RecoverPasswordConfirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordConfirm_Call) RunAndReturn(run func(context.Context, authusecase.RecoverPasswordConfirmRequest) error) *MockAuthUsecase_RecoverPasswordConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverPasswordSend provides a mock function with given fields: ctx, req
func (_m *MockAuthUsecase) RecoverPasswordSend(ctx context.Context, req authusecase.RecoverPasswordSendRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.RecoverPasswordSendRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_RecoverPasswordSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverPasswordSend'
type MockAuthUsecase_RecoverPasswordSend_Call struct {
	*mock.Call
}

// RecoverPasswordSend is a helper method to define mock.On call
//   - ctx context.Context
//   - req authusecase.RecoverPasswordSendRequest
func (_e *MockAuthUsecase_Expecter) RecoverPasswordSend(ctx interface{}, req interface{}) *MockAuthUsecase_RecoverPasswordSend_Call {
	return &MockAuthUsecase_RecoverPasswordSend_Call{Call: _e.mock.On("RecoverPasswordSend", ctx, req)}
}

func (_c *MockAuthUsecase_RecoverPasswordSend_Call) Run(run func(ctx context.Context, req authusecase.RecoverPasswordSendRequest)) *MockAuthUsecase_RecoverPasswordSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authusecase.RecoverPasswordSendRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordSend_Call) Return(_a0 error) *MockAuthUsecase_RecoverPasswordSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordSend_Call) RunAndReturn(run func(context.Context, authusecase.RecoverPasswordSendRequest) error) *MockAuthUsecase_RecoverPasswordSend_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverPasswordUpdate provides a mock function with given fields: ctx, req
func (_m *MockAuthUsecase) RecoverPasswordUpdate(ctx context.Context, req authusecase.RecoverPasswordUpdateRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.RecoverPasswordUpdateRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_RecoverPasswordUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverPasswordUpdate'
type MockAuthUsecase_RecoverPasswordUpdate_Call struct {
	*mock.Call
}

// RecoverPasswordUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - req authusecase.RecoverPasswordUpdateRequest
func (_e *MockAuthUsecase_Expecter) RecoverPasswordUpdate(ctx interface{}, req interface{}) *MockAuthUsecase_RecoverPasswordUpdate_Call {
	return &MockAuthUsecase_RecoverPasswordUpdate_Call{Call: _e.mock.On("RecoverPasswordUpdate", ctx, req)}
}

func (_c *MockAuthUsecase_RecoverPasswordUpdate_Call) Run(run func(ctx context.Context, req authusecase.RecoverPasswordUpdateRequest)) *MockAuthUsecase_RecoverPasswordUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authusecase.RecoverPasswordUpdateRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordUpdate_Call) Return(_a0 error) *MockAuthUsecase_RecoverPasswordUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_RecoverPasswordUpdate_Call) RunAndReturn(run func(context.Context, authusecase.RecoverPasswordUpdateRequest) error) *MockAuthUsecase_RecoverPasswordUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, dto
func (_m *MockAuthUsecase) Register(ctx context.Context, dto authusecase.RegisterRequest) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authusecase.RegisterRequest) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - dto authusecase.RegisterRequest
func (_e *MockAuthUsecase_Expecter) Register(ctx interface{}, dto interface{}) *MockAuthUsecase_Register_Call {
	return &MockAuthUsecase_Register_Call{Call: _e.mock.On("Register", ctx, dto)}
}

func (_c *MockAuthUsecase_Register_Call) Run(run func(ctx context.Context, dto authusecase.RegisterRequest)) *MockAuthUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authusecase.RegisterRequest))
	})
	return _c
}

func (_c *MockAuthUsecase_Register_Call) Return(_a0 error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_Register_Call) RunAndReturn(run func(context.Context, authusecase.RegisterRequest) error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthUsecase(t mockConstructorTestingTNewMockAuthUsecase) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
