// Code generated by mockery v2.20.0. DO NOT EDIT.

package authusecase

import (
	context "context"
	time "time"

	models "backend/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// MockRecoverPasswordCodeService is an autogenerated mock type for the RecoverPasswordCodeService type
type MockRecoverPasswordCodeService struct {
	mock.Mock
}

type MockRecoverPasswordCodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecoverPasswordCodeService) EXPECT() *MockRecoverPasswordCodeService_Expecter {
	return &MockRecoverPasswordCodeService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockRecoverPasswordCodeService) Get(ctx context.Context, key string) (*models.RecoverPassword, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.RecoverPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.RecoverPassword, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.RecoverPassword); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RecoverPassword)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecoverPasswordCodeService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRecoverPasswordCodeService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRecoverPasswordCodeService_Expecter) Get(ctx interface{}, key interface{}) *MockRecoverPasswordCodeService_Get_Call {
	return &MockRecoverPasswordCodeService_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRecoverPasswordCodeService_Get_Call) Run(run func(ctx context.Context, key string)) *MockRecoverPasswordCodeService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecoverPasswordCodeService_Get_Call) Return(_a0 *models.RecoverPassword, _a1 error) *MockRecoverPasswordCodeService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecoverPasswordCodeService_Get_Call) RunAndReturn(run func(context.Context, string) (*models.RecoverPassword, error)) *MockRecoverPasswordCodeService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, data, ttl
func (_m *MockRecoverPasswordCodeService) Set(ctx context.Context, data *models.RecoverPassword, ttl time.Duration) error {
	ret := _m.Called(ctx, data, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RecoverPassword, time.Duration) error); ok {
		r0 = rf(ctx, data, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecoverPasswordCodeService_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRecoverPasswordCodeService_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.RecoverPassword
//   - ttl time.Duration
func (_e *MockRecoverPasswordCodeService_Expecter) Set(ctx interface{}, data interface{}, ttl interface{}) *MockRecoverPasswordCodeService_Set_Call {
	return &MockRecoverPasswordCodeService_Set_Call{Call: _e.mock.On("Set", ctx, data, ttl)}
}

func (_c *MockRecoverPasswordCodeService_Set_Call) Run(run func(ctx context.Context, data *models.RecoverPassword, ttl time.Duration)) *MockRecoverPasswordCodeService_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RecoverPassword), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockRecoverPasswordCodeService_Set_Call) Return(_a0 error) *MockRecoverPasswordCodeService_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecoverPasswordCodeService_Set_Call) RunAndReturn(run func(context.Context, *models.RecoverPassword, time.Duration) error) *MockRecoverPasswordCodeService_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRecoverPasswordCodeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRecoverPasswordCodeService creates a new instance of MockRecoverPasswordCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRecoverPasswordCodeService(t mockConstructorTestingTNewMockRecoverPasswordCodeService) *MockRecoverPasswordCodeService {
	mock := &MockRecoverPasswordCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
