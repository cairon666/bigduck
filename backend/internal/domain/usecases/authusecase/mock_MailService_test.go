// Code generated by mockery v2.20.0. DO NOT EDIT.

package authusecase

import (
	models "backend/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMailService is an autogenerated mock type for the MailService type
type MockMailService struct {
	mock.Mock
}

type MockMailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailService) EXPECT() *MockMailService_Expecter {
	return &MockMailService_Expecter{mock: &_m.Mock}
}

// SendRecoverPasswordCode provides a mock function with given fields: ctx, data
func (_m *MockMailService) SendRecoverPasswordCode(ctx context.Context, data models.RecoverPassword) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RecoverPassword) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailService_SendRecoverPasswordCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRecoverPasswordCode'
type MockMailService_SendRecoverPasswordCode_Call struct {
	*mock.Call
}

// SendRecoverPasswordCode is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.RecoverPassword
func (_e *MockMailService_Expecter) SendRecoverPasswordCode(ctx interface{}, data interface{}) *MockMailService_SendRecoverPasswordCode_Call {
	return &MockMailService_SendRecoverPasswordCode_Call{Call: _e.mock.On("SendRecoverPasswordCode", ctx, data)}
}

func (_c *MockMailService_SendRecoverPasswordCode_Call) Run(run func(ctx context.Context, data models.RecoverPassword)) *MockMailService_SendRecoverPasswordCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.RecoverPassword))
	})
	return _c
}

func (_c *MockMailService_SendRecoverPasswordCode_Call) Return(_a0 error) *MockMailService_SendRecoverPasswordCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailService_SendRecoverPasswordCode_Call) RunAndReturn(run func(context.Context, models.RecoverPassword) error) *MockMailService_SendRecoverPasswordCode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMailService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMailService creates a new instance of MockMailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMailService(t mockConstructorTestingTNewMockMailService) *MockMailService {
	mock := &MockMailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
