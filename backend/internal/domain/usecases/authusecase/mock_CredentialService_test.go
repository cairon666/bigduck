// Code generated by mockery v2.20.0. DO NOT EDIT.

package authusecase

import (
	models "backend/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCredentialService is an autogenerated mock type for the CredentialService type
type MockCredentialService struct {
	mock.Mock
}

type MockCredentialService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialService) EXPECT() *MockCredentialService_Expecter {
	return &MockCredentialService_Expecter{mock: &_m.Mock}
}

// ConfirmEmailByID provides a mock function with given fields: ctx, id
func (_m *MockCredentialService) ConfirmEmailByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialService_ConfirmEmailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmEmailByID'
type MockCredentialService_ConfirmEmailByID_Call struct {
	*mock.Call
}

// ConfirmEmailByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCredentialService_Expecter) ConfirmEmailByID(ctx interface{}, id interface{}) *MockCredentialService_ConfirmEmailByID_Call {
	return &MockCredentialService_ConfirmEmailByID_Call{Call: _e.mock.On("ConfirmEmailByID", ctx, id)}
}

func (_c *MockCredentialService_ConfirmEmailByID_Call) Run(run func(ctx context.Context, id string)) *MockCredentialService_ConfirmEmailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialService_ConfirmEmailByID_Call) Return(_a0 error) *MockCredentialService_ConfirmEmailByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialService_ConfirmEmailByID_Call) RunAndReturn(run func(context.Context, string) error) *MockCredentialService_ConfirmEmailByID_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, credential
func (_m *MockCredentialService) Create(ctx context.Context, credential models.Credential) error {
	ret := _m.Called(ctx, credential)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Credential) error); ok {
		r0 = rf(ctx, credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCredentialService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - credential models.Credential
func (_e *MockCredentialService_Expecter) Create(ctx interface{}, credential interface{}) *MockCredentialService_Create_Call {
	return &MockCredentialService_Create_Call{Call: _e.mock.On("Create", ctx, credential)}
}

func (_c *MockCredentialService_Create_Call) Run(run func(ctx context.Context, credential models.Credential)) *MockCredentialService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Credential))
	})
	return _c
}

func (_c *MockCredentialService_Create_Call) Return(_a0 error) *MockCredentialService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialService_Create_Call) RunAndReturn(run func(context.Context, models.Credential) error) *MockCredentialService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByEmail provides a mock function with given fields: ctx, email
func (_m *MockCredentialService) ReadByEmail(ctx context.Context, email string) (models.Credential, error) {
	ret := _m.Called(ctx, email)

	var r0 models.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Credential, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Credential); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.Credential)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialService_ReadByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByEmail'
type MockCredentialService_ReadByEmail_Call struct {
	*mock.Call
}

// ReadByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockCredentialService_Expecter) ReadByEmail(ctx interface{}, email interface{}) *MockCredentialService_ReadByEmail_Call {
	return &MockCredentialService_ReadByEmail_Call{Call: _e.mock.On("ReadByEmail", ctx, email)}
}

func (_c *MockCredentialService_ReadByEmail_Call) Run(run func(ctx context.Context, email string)) *MockCredentialService_ReadByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialService_ReadByEmail_Call) Return(_a0 models.Credential, _a1 error) *MockCredentialService_ReadByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialService_ReadByEmail_Call) RunAndReturn(run func(context.Context, string) (models.Credential, error)) *MockCredentialService_ReadByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByID provides a mock function with given fields: ctx, id
func (_m *MockCredentialService) ReadByID(ctx context.Context, id string) (models.Credential, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Credential, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Credential); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Credential)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialService_ReadByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByID'
type MockCredentialService_ReadByID_Call struct {
	*mock.Call
}

// ReadByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCredentialService_Expecter) ReadByID(ctx interface{}, id interface{}) *MockCredentialService_ReadByID_Call {
	return &MockCredentialService_ReadByID_Call{Call: _e.mock.On("ReadByID", ctx, id)}
}

func (_c *MockCredentialService_ReadByID_Call) Run(run func(ctx context.Context, id string)) *MockCredentialService_ReadByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialService_ReadByID_Call) Return(_a0 models.Credential, _a1 error) *MockCredentialService_ReadByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialService_ReadByID_Call) RunAndReturn(run func(context.Context, string) (models.Credential, error)) *MockCredentialService_ReadByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmailByID provides a mock function with given fields: ctx, id, email
func (_m *MockCredentialService) UpdateEmailByID(ctx context.Context, id string, email string) error {
	ret := _m.Called(ctx, id, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialService_UpdateEmailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailByID'
type MockCredentialService_UpdateEmailByID_Call struct {
	*mock.Call
}

// UpdateEmailByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - email string
func (_e *MockCredentialService_Expecter) UpdateEmailByID(ctx interface{}, id interface{}, email interface{}) *MockCredentialService_UpdateEmailByID_Call {
	return &MockCredentialService_UpdateEmailByID_Call{Call: _e.mock.On("UpdateEmailByID", ctx, id, email)}
}

func (_c *MockCredentialService_UpdateEmailByID_Call) Run(run func(ctx context.Context, id string, email string)) *MockCredentialService_UpdateEmailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCredentialService_UpdateEmailByID_Call) Return(_a0 error) *MockCredentialService_UpdateEmailByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialService_UpdateEmailByID_Call) RunAndReturn(run func(context.Context, string, string) error) *MockCredentialService_UpdateEmailByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePasswordByID provides a mock function with given fields: ctx, id, hash, salt
func (_m *MockCredentialService) UpdatePasswordByID(ctx context.Context, id string, hash string, salt string) error {
	ret := _m.Called(ctx, id, hash, salt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, hash, salt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialService_UpdatePasswordByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePasswordByID'
type MockCredentialService_UpdatePasswordByID_Call struct {
	*mock.Call
}

// UpdatePasswordByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - hash string
//   - salt string
func (_e *MockCredentialService_Expecter) UpdatePasswordByID(ctx interface{}, id interface{}, hash interface{}, salt interface{}) *MockCredentialService_UpdatePasswordByID_Call {
	return &MockCredentialService_UpdatePasswordByID_Call{Call: _e.mock.On("UpdatePasswordByID", ctx, id, hash, salt)}
}

func (_c *MockCredentialService_UpdatePasswordByID_Call) Run(run func(ctx context.Context, id string, hash string, salt string)) *MockCredentialService_UpdatePasswordByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCredentialService_UpdatePasswordByID_Call) Return(_a0 error) *MockCredentialService_UpdatePasswordByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialService_UpdatePasswordByID_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCredentialService_UpdatePasswordByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCredentialService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCredentialService creates a new instance of MockCredentialService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCredentialService(t mockConstructorTestingTNewMockCredentialService) *MockCredentialService {
	mock := &MockCredentialService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
