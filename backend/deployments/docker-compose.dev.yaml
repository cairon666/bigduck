version: "3"

services:
  nats:
    container_name: nats
    image: nats
    ports:
      - "8222:8222"
      - "4222:4222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    networks:
      - backend
  minio:
    container_name: minio
    image: 'minio/minio'
    command: server /data --address ":9000" --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-storage:/data
    restart: unless-stopped
    networks:
      - backend
#  elasticsearch:
#    container_name: elasticsearch
#    image: 'elasticsearch:8.8.0'
#    command: |
#      /bin/sh -c "./bin/elasticsearch-plugin list | grep -q ingest-attachment || yes | ./bin/elasticsearch-plugin install --silent ingest-attachment;
#      /usr/local/bin/docker-entrypoint.sh eswrapper"
#    volumes:
#      - elastic-storage:/usr/share/elasticsearch/data
#    ports:
#      - "9200:9200"
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
#      - xpack.security.enabled=false
#    healthcheck:
#      interval: 20s
#      retries: 10
#      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
#    restart: unless-stopped
#    networks:
#      - backend
  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    environment:
      XPACK_MONITORING_ENABLED: "false"
    volumes:
      - redis_data:/data
      - ../configs/redis/redis.conf:/etc/redis/redis.conf
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    networks:
      - backend
  pgbouncer:
    container_name: pgbouncer
    image: edoburu/pgbouncer
    depends_on:
      - postgres
    restart: always
    env_file:
      - ../configs/pgbouncer/pgbouncer.env
    ports:
      - "6432:6432"
    volumes:
      - ../configs/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ../configs/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    networks:
      - backend
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - ../configs/postgres/postgresql.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"   # http web client
    env_file:
      - ../configs/jaeger/jaeger.env
    networks:
      - backend
    volumes:
      - ../configs/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
  otel_collector:
    container_name: otel_collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ../configs/otelcol/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "12345:12345" # otlp/spanmetrics grpc receiver
    depends_on:
      - jaeger
    networks:
      - backend
#  grafana:
#    container_name: grafana
#    image: grafana/grafana:latest
#    ports:
#      - "3333:3000"   # http web client
#    volumes:
#      - ../configs/grafana/dashboards:/etc/dashboards
#      - ../configs/grafana/grafana.ini:/etc/grafana/grafana.ini
#      - ../configs/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
#      - grafana-storage:/var/lib/grafana
#    env_file:
#      - ../configs/grafana/grafana.env
#    networks:
#      - backend
#    depends_on:
#      - prometheus
#      - elasticsearch


volumes:
  postgres_data: { }
  redis_data: { }
  grafana-storage: { }
  minio-storage: {}
  elastic-storage: {}

networks:
  backend:


