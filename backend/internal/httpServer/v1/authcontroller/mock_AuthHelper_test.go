// Code generated by mockery v2.20.0. DO NOT EDIT.

package authcontroller

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthHelper is an autogenerated mock type for the AuthHelper type
type MockAuthHelper struct {
	mock.Mock
}

type MockAuthHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthHelper) EXPECT() *MockAuthHelper_Expecter {
	return &MockAuthHelper_Expecter{mock: &_m.Mock}
}

// ClearRefreshCookie provides a mock function with given fields: w
func (_m *MockAuthHelper) ClearRefreshCookie(w http.ResponseWriter) {
	_m.Called(w)
}

// MockAuthHelper_ClearRefreshCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearRefreshCookie'
type MockAuthHelper_ClearRefreshCookie_Call struct {
	*mock.Call
}

// ClearRefreshCookie is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockAuthHelper_Expecter) ClearRefreshCookie(w interface{}) *MockAuthHelper_ClearRefreshCookie_Call {
	return &MockAuthHelper_ClearRefreshCookie_Call{Call: _e.mock.On("ClearRefreshCookie", w)}
}

func (_c *MockAuthHelper_ClearRefreshCookie_Call) Run(run func(w http.ResponseWriter)) *MockAuthHelper_ClearRefreshCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockAuthHelper_ClearRefreshCookie_Call) Return() *MockAuthHelper_ClearRefreshCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHelper_ClearRefreshCookie_Call) RunAndReturn(run func(http.ResponseWriter)) *MockAuthHelper_ClearRefreshCookie_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshCookie provides a mock function with given fields: r
func (_m *MockAuthHelper) GetRefreshCookie(r *http.Request) (string, error) {
	ret := _m.Called(r)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (string, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthHelper_GetRefreshCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshCookie'
type MockAuthHelper_GetRefreshCookie_Call struct {
	*mock.Call
}

// GetRefreshCookie is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockAuthHelper_Expecter) GetRefreshCookie(r interface{}) *MockAuthHelper_GetRefreshCookie_Call {
	return &MockAuthHelper_GetRefreshCookie_Call{Call: _e.mock.On("GetRefreshCookie", r)}
}

func (_c *MockAuthHelper_GetRefreshCookie_Call) Run(run func(r *http.Request)) *MockAuthHelper_GetRefreshCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockAuthHelper_GetRefreshCookie_Call) Return(_a0 string, _a1 error) *MockAuthHelper_GetRefreshCookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthHelper_GetRefreshCookie_Call) RunAndReturn(run func(*http.Request) (string, error)) *MockAuthHelper_GetRefreshCookie_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokens provides a mock function with given fields: IDUser
func (_m *MockAuthHelper) NewTokens(IDUser string) (string, string, error) {
	ret := _m.Called(IDUser)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(IDUser)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(IDUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(IDUser)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(IDUser)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthHelper_NewTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTokens'
type MockAuthHelper_NewTokens_Call struct {
	*mock.Call
}

// NewTokens is a helper method to define mock.On call
//   - IDUser string
func (_e *MockAuthHelper_Expecter) NewTokens(IDUser interface{}) *MockAuthHelper_NewTokens_Call {
	return &MockAuthHelper_NewTokens_Call{Call: _e.mock.On("NewTokens", IDUser)}
}

func (_c *MockAuthHelper_NewTokens_Call) Run(run func(IDUser string)) *MockAuthHelper_NewTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthHelper_NewTokens_Call) Return(_a0 string, _a1 string, _a2 error) *MockAuthHelper_NewTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthHelper_NewTokens_Call) RunAndReturn(run func(string) (string, string, error)) *MockAuthHelper_NewTokens_Call {
	_c.Call.Return(run)
	return _c
}

// SetRefreshCookie provides a mock function with given fields: w, refresh
func (_m *MockAuthHelper) SetRefreshCookie(w http.ResponseWriter, refresh string) error {
	ret := _m.Called(w, refresh)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, string) error); ok {
		r0 = rf(w, refresh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthHelper_SetRefreshCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRefreshCookie'
type MockAuthHelper_SetRefreshCookie_Call struct {
	*mock.Call
}

// SetRefreshCookie is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - refresh string
func (_e *MockAuthHelper_Expecter) SetRefreshCookie(w interface{}, refresh interface{}) *MockAuthHelper_SetRefreshCookie_Call {
	return &MockAuthHelper_SetRefreshCookie_Call{Call: _e.mock.On("SetRefreshCookie", w, refresh)}
}

func (_c *MockAuthHelper_SetRefreshCookie_Call) Run(run func(w http.ResponseWriter, refresh string)) *MockAuthHelper_SetRefreshCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(string))
	})
	return _c
}

func (_c *MockAuthHelper_SetRefreshCookie_Call) Return(_a0 error) *MockAuthHelper_SetRefreshCookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthHelper_SetRefreshCookie_Call) RunAndReturn(run func(http.ResponseWriter, string) error) *MockAuthHelper_SetRefreshCookie_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTokens provides a mock function with given fields: refresh
func (_m *MockAuthHelper) UpdateTokens(refresh string) (string, string, error) {
	ret := _m.Called(refresh)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(refresh)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refresh)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(refresh)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(refresh)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthHelper_UpdateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTokens'
type MockAuthHelper_UpdateTokens_Call struct {
	*mock.Call
}

// UpdateTokens is a helper method to define mock.On call
//   - refresh string
func (_e *MockAuthHelper_Expecter) UpdateTokens(refresh interface{}) *MockAuthHelper_UpdateTokens_Call {
	return &MockAuthHelper_UpdateTokens_Call{Call: _e.mock.On("UpdateTokens", refresh)}
}

func (_c *MockAuthHelper_UpdateTokens_Call) Run(run func(refresh string)) *MockAuthHelper_UpdateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthHelper_UpdateTokens_Call) Return(_a0 string, _a1 string, _a2 error) *MockAuthHelper_UpdateTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthHelper_UpdateTokens_Call) RunAndReturn(run func(string) (string, string, error)) *MockAuthHelper_UpdateTokens_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthHelper creates a new instance of MockAuthHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthHelper(t mockConstructorTestingTNewMockAuthHelper) *MockAuthHelper {
	mock := &MockAuthHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
